#pragma kernel CSMain

#pragma multi_compile BUILD_POINTS BUILD_LINES BUILD_TETRAHEDRONS
#pragma multi_compile DISTANCE_FUNC_1 DISTANCE_FUNC_2 DISTANCE_FUNC_4 DISTANCE_FUNC_6 DISTANCE_FUNC_8

#if defined(DISTANCE_FUNC_1)
    // Sub-optimal
    #define DIST_F(x) x = sqrt(x);
#elif defined(DISTANCE_FUNC_2)
    // Already squared
    #define DIST_F(x)
#elif defined(DISTANCE_FUNC_4)
    #define DIST_F(x) x = x*x;
#elif defined(DISTANCE_FUNC_6)
    #define DIST_F(x) x = x*x*x;
#elif defined(DISTANCE_FUNC_8)
    #define DIST_F(x) x = x*x*x*x;
#endif

#define EPSILON 1e-8
#define PI 3.1415927
#define TWO_PI PI*2

#define SHARED_MEMORY_SIZE 256
#define THREAD_COUNT 64
#define THREAD_DIM uint3(64, 4, 1)
#define GROUP_DIM uint3(_InstanceCount / 64, 1, 1)

// X: s_SpeedDefault, Y: s_DistanceDefault,
// Z: s_MassDefault, W: s_ForceDefault
float4 _UnitConversion;
float4x4 _VPMatrix;

uint _InstanceCount;
uint _StartPosition;
uint _ActorCount;

float4 _ColourA;
float4 _ColourB;

float _DistanceCoeff;
float _VelocityDecay;
float _TrailLength;
float _TimeStep;
float _AvgMass;
float _Time;
float _G;

struct Input
{
    uint3 GroupID : SV_GroupID;
    uint3 ThreadID : SV_GroupThreadID;
};

struct GeometryData
{
    #if defined(BUILD_POINTS)
        float3 Vertices[1];
    #elif defined(BUILD_LINES)
        float3 Vertices[2];
    #elif defined(BUILD_TETRAHEDRONS)
        float3 Vertices[12];
        float3 Normals[4];
    #endif

    float3 Colour;
};

struct ParticleData
{
    float3 Position;
    float3 Velocity;
    float Mass;
    float Entropy;
};

struct ActorData
{
    float3 Position;
    float3 Force;
    float Mass;
};

struct DrawCallArgs
{
    uint VerticesPerInstance;
    uint InstanceCount;
    uint StartVertexLocation;
    uint StartInstanceLocation;
};

StructuredBuffer<ParticleData> _ParticleBufferRead;
StructuredBuffer<ActorData> _ActorBuffer;

RWStructuredBuffer<ParticleData> _ParticleBufferWrite;
RWStructuredBuffer<DrawCallArgs> _DrawCallArgsBuffer;
AppendStructuredBuffer<GeometryData> _GeometryBuffer;

groupshared ParticleData _SharedData[SHARED_MEMORY_SIZE];

#include "ComputeFunctions.hlsl"

void ApplyForces(Input input, ParticleData data, uint idx)
{
    #define N _InstanceCount / THREAD_DIM.y

    uint start = N * input.ThreadID.y;
    uint finish = start + N;
    uint tile = start / N;

    uint x;
    uint idxRead;
    uint idxShared;

    // Force in Newtons
    float3 force = float3(0.0, 0.0, 0.0);

    //[unroll(N / THREAD_DIM.x)]
    for (uint i = start; i < finish; i += THREAD_DIM.x, tile++) 
    {
        x = input.GroupID.x + tile;

        idxShared = input.ThreadID.x + input.ThreadID.y * THREAD_DIM.x;
        idxRead = (x < GROUP_DIM.x) ? x : input.ThreadID.x + (x - GROUP_DIM.x) * THREAD_DIM.x;

        _SharedData[idxShared] = _ParticleBufferRead[_StartPosition + idxRead];
        GroupMemoryBarrierWithGroupSync();

        [unroll(THREAD_DIM.x)]
        for (uint j = 0; j < THREAD_DIM.x; j++) 
        {
            idxShared = j + THREAD_DIM.x * input.ThreadID.y;
            CalcGravitation(data, _SharedData[idxShared], /*inout*/ force);
        }

        GroupMemoryBarrierWithGroupSync();
    }

    ParticleData actor;
    for (uint k = 0; k < _ActorCount; k++)
    {
        actor = (ParticleData)0;
        actor.Position = _ActorBuffer[k].Position;
        actor.Mass = _ActorBuffer[k].Mass;

        CalcGravitation(data, actor, /*inout*/ force);
        CalcInputForce(data, _ActorBuffer[k], /*inout*/ force);
    }

    // With default behaviour,
    // this will convert from Newtons to Kilonewtons
    force *= _UnitConversion.w;

    // Newton's Second Law of Motion
    // Outputs Kilometres/Second/Second

    // a = f/m
    float3 acceleration = (force / data.Mass) * _TimeStep;

    data.Velocity = data.Velocity * _VelocityDecay + acceleration;
    data.Position += data.Velocity;
    
    _ParticleBufferWrite[_StartPosition + idx] = data;
}

void BuildGeometry(ParticleData data)
{
    // Avoid sending particles to vertex shader if they are outside camera frustrum
    if (ShouldClip(data))
        return;

    GeometryData geo;
    geo.Colour = Colourise(data) * CalcLuminosity(data.Mass);

    #if defined(BUILD_POINTS) || defined(BUILD_LINES)
        geo.Vertices[0] = data.Position;

        #if defined(BUILD_LINES)
            geo.Vertices[1] = data.Position - (data.Velocity * _TrailLength);
        #endif
    #elif defined(BUILD_TETRAHEDRONS)

        float mass = saturate(data.Mass / _AvgMass);

        float3x3 rotMatrixX = RotationX(data.Entropy * TWO_PI + _Time * (1.0 - mass) * 2);
        float3x3 rotMatrixY = RotationY(data.Entropy * data.Entropy * TWO_PI + _Time * (1.0 - mass) * 4);
        float3x3 rotMatrixXY = mul(rotMatrixX, rotMatrixY);

        // Tetrahedron
        //       ^
        //      /|\
        //     / | \
        //    '-.|.-'

        float3 p0 = mul(rotMatrixXY, float3(-0.5, -0.217, -0.289)) * mass;
        float3 p1 = mul(rotMatrixXY, float3(0.5, -0.217, -0.289)) * mass;
        float3 p2 = mul(rotMatrixXY, float3(0.0, -0.217, 0.577)) * mass;
        float3 p3 = mul(rotMatrixXY, float3(0.0, 0.650, 0.0)) * mass;

        float3 n0 = mul(rotMatrixXY, float3(0.0, -1.0, 0.0));
        float3 n1 = mul(rotMatrixXY, float3(-0.822, 0.316, 0.474));
        float3 n2 = mul(rotMatrixXY, float3(0.822, 0.316, 0.474));
        float3 n3 = mul(rotMatrixXY, float3(0.0, 0.317, -0.949));

        // Triangle 1
        geo.Vertices[0] = data.Position + p0;
        geo.Vertices[1] = data.Position + p1;
        geo.Vertices[2] = data.Position + p2;
        geo.Normals[0] = n0;

        // Triangle 2
        geo.Vertices[3] = data.Position + p0;
        geo.Vertices[4] = data.Position + p2;
        geo.Vertices[5] = data.Position + p3;
        geo.Normals[1] = n1;

        // Triangle 3
        geo.Vertices[6] = data.Position + p2;
        geo.Vertices[7] = data.Position + p1;
        geo.Vertices[8] = data.Position + p3;
        geo.Normals[2] = n2;

        // Triangle 4
        geo.Vertices[9] = data.Position + p0;
        geo.Vertices[10] = data.Position + p3;
        geo.Vertices[11] = data.Position + p1;
        geo.Normals[3] = n3;
    #endif

    _GeometryBuffer.Append(geo);
    InterlockedAdd(_DrawCallArgsBuffer[0].InstanceCount, 1);
}

[numthreads(THREAD_COUNT, 1, 1)]
void CSMain (Input input)
{
    uint idx = input.ThreadID.x + input.GroupID.x * THREAD_COUNT;
    ParticleData data = _ParticleBufferRead[_StartPosition + idx];

    ApplyForces(input, data, idx);
    BuildGeometry(data);
}